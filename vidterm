#!/usr/bin/python3

''' Vidterm: A simple video editor CLI for MoviePY.
'''

import argparse
from moviepy import editor
import sys

parser = argparse.ArgumentParser()

parser.add_argument('-t', '--target', help='Output file.')

# Manage clips
parser.add_argument('-c', '--clip', nargs='+', help='Take a clip from a video file. First argument is the video file. Second argument is optional and is the start time of the clip as taken from the video file (in seconds). Third argument is optional and is the end time in seconds.')
parser.add_argument('-r', '--render', action='store_true', help='Render current clips.')

# Video
parser.add_argument('-s', '--speed', type=float, help='Speed up factor. 1.0 is regular speed.')
parser.add_argument('-f', '--fadeout', type=float, help='Fade to black for N seconds.')

# Audio
parser.add_argument('-a', '--add-audio', nargs='+', help='Add audio from a file. Optional start and end times.')
parser.add_argument('-afo', '--audio-fadeout', type=float, help='Fade out audio for last N seconds')


class Aggregator(object):

    clips = []
    target = None


    def parse(self, command):
        args = parser.parse_args(command)

        if args.target:
            self.target = args.target

        if args.clip:
            if len(args.clip) == 1:
                self.add_clip(args.clip[0])
            elif len(args.clip) == 3:
                self.add_clip(args.clip[0], args.clip[1], args.clip[2])
            else:
                raise Exception(f'Expected 1 to 3 arguments. Got {len(args.clip)}.')

        if args.render:
            self.render()

        if args.speed:
            self.speedx(args.speed)

        if args.fadeout:
            self.fadeout(args.fadeout)

        if args.add_audio:
            if len(args.add_audio) == 1:
                self.add_audio(args.add_audio[0])
            elif len(args.add_audio) == 2:
                self.add_audio(args.add_audio[0], args.add_audio[1])
            elif len(args.add_audio) == 3:
                self.add_audio(args.add_audio[0], args.add_audio[1], args.add_audio[2])
            else:
                raise Exception(f'Expected 1 to 3 arguments. Got {len(args.clip)}.')

        if args.audio_fadeout:
            self.audio_fadeout(args.audio_fadeout)

    def add_clip(self, source, start, end):
        print(f'>  Loading {source}')
        print(f'>  >  Clipping from {start} to {end}')
        self.clips.append(editor.VideoFileClip(source).subclip(start, end))

    def speedx(self, factor):
        print(f'>  >  Speeding up by factor: {factor}')
        self.clips[-1] = self.clips[-1].speedx(factor)

    def fadeout(self, duration):
        print(f'>  >  Fading out for {duration} seconds')
        self.clips[-1] = self.clips[-1].fadeout(duration)

    def add_audio(self, audio_file, start=None, end=None):
        print(f'>  >  Adding audio from {audio_file}')
        track = editor.AudioFileClip(audio_file)

        if start:
            if not end:
                end = track.duration
            track = track.subclip(start, end)

        if track.duration > self.clips[-1].duration:
            track = track.subclip(0, self.clips[-1].duration)

        self.clips[-1] = self.clips[-1].set_audio(track)

    def audio_fadeout(self, seconds):
        self.clips[-1] = self.clips[-1].audio_fadeout(seconds)

    def render(self):
        print(f'>  Rendering all current clips')
        intermediate = editor.concatenate_videoclips(self.clips)
        self.clips = [intermediate,]

    def save(self):
        self.render()

        if not self.target:
            self.target = input('Where do you want to save the final video? ') 

        self.clips[-1].write_videofile(self.target)


if __name__ == '__main__':
    agg = Aggregator()

    idx = []
    for k in range(1, len(sys.argv)):
        if sys.argv[k][0] == '-':
            idx.append(k)

    for i in range(len(idx[:-1])):
        agg.parse(sys.argv[idx[i]: idx[i+1]])
    agg.parse(sys.argv[idx[-1]:])

    agg.save()
